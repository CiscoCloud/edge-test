package ly.stealth.mesos.logging;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Timing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Timing\",\"fields\":[{\"name\":\"eventName\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"long\"},{\"name\":\"ntpstatus\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence eventName;
  @Deprecated public long value;
  @Deprecated public java.lang.Long ntpstatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Timing() {}

  /**
   * All-args constructor.
   */
  public Timing(java.lang.CharSequence eventName, java.lang.Long value, java.lang.Long ntpstatus) {
    this.eventName = eventName;
    this.value = value;
    this.ntpstatus = ntpstatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventName;
    case 1: return value;
    case 2: return ntpstatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventName = (java.lang.CharSequence)value$; break;
    case 1: value = (java.lang.Long)value$; break;
    case 2: ntpstatus = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventName' field.
   */
  public java.lang.CharSequence getEventName() {
    return eventName;
  }

  /**
   * Sets the value of the 'eventName' field.
   * @param value the value to set.
   */
  public void setEventName(java.lang.CharSequence value) {
    this.eventName = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.lang.Long getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Long value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'ntpstatus' field.
   */
  public java.lang.Long getNtpstatus() {
    return ntpstatus;
  }

  /**
   * Sets the value of the 'ntpstatus' field.
   * @param value the value to set.
   */
  public void setNtpstatus(java.lang.Long value) {
    this.ntpstatus = value;
  }

  /** Creates a new Timing RecordBuilder */
  public static Timing.Builder newBuilder() {
    return new Timing.Builder();
  }
  
  /** Creates a new Timing RecordBuilder by copying an existing Builder */
  public static Timing.Builder newBuilder(Timing.Builder other) {
    return new Timing.Builder(other);
  }
  
  /** Creates a new Timing RecordBuilder by copying an existing Timing instance */
  public static Timing.Builder newBuilder(Timing other) {
    return new Timing.Builder(other);
  }
  
  /**
   * RecordBuilder for Timing instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Timing>
    implements org.apache.avro.data.RecordBuilder<Timing> {

    private java.lang.CharSequence eventName;
    private long value;
    private java.lang.Long ntpstatus;

    /** Creates a new Builder */
    private Builder() {
      super(Timing.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Timing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ntpstatus)) {
        this.ntpstatus = data().deepCopy(fields()[2].schema(), other.ntpstatus);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Timing instance */
    private Builder(Timing other) {
            super(Timing.SCHEMA$);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ntpstatus)) {
        this.ntpstatus = data().deepCopy(fields()[2].schema(), other.ntpstatus);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'eventName' field */
    public java.lang.CharSequence getEventName() {
      return eventName;
    }
    
    /** Sets the value of the 'eventName' field */
    public Timing.Builder setEventName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'eventName' field has been set */
    public boolean hasEventName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'eventName' field */
    public Timing.Builder clearEventName() {
      eventName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.lang.Long getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public Timing.Builder setValue(long value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'value' field */
    public Timing.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ntpstatus' field */
    public java.lang.Long getNtpstatus() {
      return ntpstatus;
    }
    
    /** Sets the value of the 'ntpstatus' field */
    public Timing.Builder setNtpstatus(java.lang.Long value) {
      validate(fields()[2], value);
      this.ntpstatus = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ntpstatus' field has been set */
    public boolean hasNtpstatus() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ntpstatus' field */
    public Timing.Builder clearNtpstatus() {
      ntpstatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Timing build() {
      try {
        Timing record = new Timing();
        record.eventName = fieldSetFlags()[0] ? this.eventName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Long) defaultValue(fields()[1]);
        record.ntpstatus = fieldSetFlags()[2] ? this.ntpstatus : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
